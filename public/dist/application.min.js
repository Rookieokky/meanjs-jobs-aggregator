"use strict";var ApplicationConfiguration=function(){var applicationModuleName="jobs-aggregator",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","angular-confirm","infinite-scroll","ui.gravatar"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0),$httpProvider.defaults.headers.common["X-Requested-With"]="XMLHttpRequest"}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("dashboard"),ApplicationConfiguration.registerModule("stats"),ApplicationConfiguration.registerModule("users"),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("topbar","articles","List Articles","articles"),Menus.addSubMenuItem("topbar","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","$location","$http","Authentication","Menus","Notification",function($scope,$location,$http,Authentication,Menus,Notification){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1}),$scope.isMenuActive=function(section){var re=new RegExp("^"+section);return re.test($location.path())},$scope.isSigningOut=!1,$scope.signOut=function(){$scope.isSigningOut=!0,$http["delete"]("/api/auth").success(function(){$scope.isSigningOut=!1,Notification.showSuccess("Signed out"),$scope.authentication.user=null,$location.path("/")}).error(function(response){$scope.isSigningOut=!1;var message=response.data&&response.data.message?response.data.message:response.message;Notification.showError(message||"Unknown error")})}}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").controller("SidebarController",["$scope",function($scope){$scope.toggleMenu=function(){$scope.isMenuVisible=!$scope.isMenuVisible},$scope.$on("$stateChangeSuccess",function(){$scope.isMenuVisible=!1})}]),angular.module("core").directive("loader",[function(){return{templateUrl:"/modules/core/views/loader.client.view.html",restrict:"E",link:function(scope,element,attrs){}}}]),angular.module("core").directive("subscriptionsList",["Subscription","$state","$location",function(Subscription,$state,$location){return{templateUrl:"/modules/core/views/subscriptions-list.client.view.html",restrict:"E",link:function(scope,element,attrs){Subscription.clear(),scope.loadInProgress=!0,Subscription.query(function(data){scope.loadInProgress=!1,scope.subscriptions=Subscription.getAll()}),scope.removeSubscription=function(subscription){subscription.$remove(function(){for(var i in scope.subscriptions)scope.subscriptions[i]===subscription&&scope.subscriptions.splice(i,1)})},scope.editSubscription=function($event,subscription){$event.preventDefault(),$event.stopPropagation(),$state.go("dashboard.edit-subscription",{subscriptionId:subscription._id})},scope.isItemActive=function(path,subscription){var curPath=path+"/"+subscription._id;return $location.path()===curPath}}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("Notification",["$q",function($q){function showError(){var title,message;2===arguments.length&&(title=arguments[0],message=arguments[1]),1===arguments.length&&(title="Error",message=arguments[0]),$.growl.error({title:title,message:message})}function showSuccess(){var title,message;2===arguments.length&&(title=arguments[0],message=arguments[1]),1===arguments.length&&(title="Done",message=arguments[0]),$.growl.notice({title:title,message:message})}function showNotice(){var title,message;2===arguments.length&&(title=arguments[0],message=arguments[1]),1===arguments.length&&(title="Notice",message=arguments[0]),$.growl({title:title,message:message})}function showWarning(){var title,message;2===arguments.length&&(title=arguments[0],message=arguments[1]),1===arguments.length&&(title="Warning",message=arguments[0]),$.growl.warning({title:title,message:message})}return{showError:showError,showSuccess:showSuccess,showNotice:showNotice,showWarning:showWarning,interceptor:{responseError:function(response){var message=response.data&&response.data.message?response.data.message:response.message;console.log(response),showError(message||response.status+" "+response.statusText);var deferred=$q.defer();return deferred.reject(response),deferred.promise}}}}]),angular.module("dashboard").config(["$stateProvider",function($stateProvider){$stateProvider.state("dashboard",{url:"/dashboard",views:{"dashboard@":{templateUrl:"modules/dashboard/views/_layout.client.view.html"},"jobs@dashboard":{templateUrl:"modules/dashboard/views/all-jobs.client.view.html"}}}).state("dashboard.new-subscription",{url:"/subscription/new",views:{content:{templateUrl:"modules/dashboard/views/new-subscription.client.view.html"},"jobs@dashboard":{template:""}}}).state("dashboard.edit-subscription",{url:"/edit-subscription/:subscriptionId",views:{content:{templateUrl:"modules/dashboard/views/edit-subscription.client.view.html"},"jobs@dashboard":{template:""}}}).state("dashboard.view-subscription-jobs",{url:"/subscription/:subscriptionId",views:{content:{template:""},"jobs@dashboard":{templateUrl:"modules/dashboard/views/view-subscription-jobs.client.view.html"}}})}]),angular.module("dashboard").controller("DashboardController",["$scope","Job",function($scope,Job){}]),angular.module("dashboard").controller("EditSubscriptionController",["$scope","$stateParams",function($scope,$stateParams){$scope.subscriptionId=$stateParams.subscriptionId}]),angular.module("dashboard").controller("NewSubscriptionController",["$scope",function($scope){}]),angular.module("dashboard").controller("ViewSubscriptionJobsController",["$scope","$stateParams","Job",function($scope,$stateParams,Job){$scope.subscriptionId=$stateParams.subscriptionId}]),angular.module("dashboard").directive("editSubscriptionForm",["$location","Job","Subscription",function($location,Job,Subscription){return{templateUrl:"/modules/dashboard/views/edit-subscription-form.client.view.html",restrict:"E",scope:{subscriptionId:"="},link:function(scope,element,attrs){scope.search={city:""},scope.subscription={_id:null,title:"",selectedCities:{},keywords:[]},scope.save=function(){var cities=[],subscription=new Subscription({title:scope.subscription.title,cities:cities,keywords:scope.subscription.keywords});$.each(scope.subscription.selectedCities,function(key,value){value&&cities.push(key)}),scope.subscriptionId?(subscription._id=scope.subscriptionId,subscription.$update(function(response){},function(errorResponse){scope.error=errorResponse.data.message})):subscription.$save(function(response){$location.path("dashboard/subscription/"+response._id)},function(errorResponse){scope.error=errorResponse.data.message})},scope.loadInProgress=!0,Job.getStats({cities:!0}).$promise.then(function(stats){scope.stats=stats,scope.loadInProgress=!1},function(){scope.loadInProgress=!1}),scope.subscriptionId&&Subscription.get({id:scope.subscriptionId}).$promise.then(function(subscription){scope.subscription._id=subscription._id,scope.subscription.title=subscription.title,scope.subscription.keywords=subscription.keywords,$.each(subscription.cities,function(index,city){scope.subscription.selectedCities[city]=!0})})}}}]),angular.module("dashboard").directive("jobItem",[function(){return{templateUrl:"/modules/dashboard/views/job-item.client.view.html",restrict:"E",link:function(scope,element,attrs){}}}]),angular.module("dashboard").directive("jobsList",["$stateParams","Job",function($stateParams,Job){return{templateUrl:"/modules/dashboard/views/jobs-list.client.view.html",restrict:"E",scope:{subscriptionId:"="},link:function(scope,element,attrs){Job.clearItems();var retriesCount=0;scope.loadInProgress=!1,scope.retriesCountExceeded=!1,scope.loadMoreJobs=function(){if(!scope.loadInProgress){var onPageLoaded=function(err,currentJobs){err?scope.loadingError=!0:(scope.loadingError=!1,scope.jobs=Job.getItems()),scope.loadInProgress=!1,!err&&currentJobs&&currentJobs.length||(retriesCount++,retriesCount>10&&(scope.retriesCountExceeded=!0))};scope.loadInProgress=!0,scope.subscriptionId?Job.loadNextPage($stateParams.subscriptionId,onPageLoaded):Job.loadNextPage($stateParams.subscriptionId,onPageLoaded)}}}}}]),angular.module("dashboard").directive("keywordsTabinput",[function(){return{templateUrl:"/modules/dashboard/views/keywords-tabinput.client.view.html",restrict:"E",scope:{keywords:"="},link:function(scope,element,attrs){var input=$(element).find("input");input.tagsinput(),scope.$watch(function(){return scope.keywords},function(){scope.keywords&&$.each(scope.keywords,function(index,keyword){input.tagsinput("add",keyword)})}),input.on("itemAdded",function(event){scope.keywords.push(event.item)}),input.on("itemRemoved",function(event){scope.$apply(function(){scope.keywords=$.grep(scope.keywords,function(keyword){return keyword!==event.item})})})}}}]),angular.module("dashboard").directive("searchInput",[function(){return{templateUrl:"/modules/dashboard/views/search-input.client.view.html",restrict:"E",scope:{value:"="},link:function(scope,element,attrs){$(element).find("input").keydown(function(event){return 13===event.keyCode?(event.preventDefault(),!1):void 0}).focus(function(){$(this).closest(".form-group").width("100%")}).focusout(function(){$(this).closest(".form-group").width("")})}}}]),angular.module("dashboard").factory("Job",["$resource","Notification",function($resource,Notification){var Job=$resource("/api/jobs/:jobId",{articleId:"@_id"},{query:{method:"GET",isArray:!0,interceptor:Notification.interceptor},update:{method:"PUT",interceptor:Notification.interceptor},getStats:{method:"GET",url:"/api/jobs/stats",interceptor:Notification.interceptor}}),allLoadedJobs=[];return Job.loadNextPage=function(){var onDone=null,subscriptionId=null;1===arguments.length&&(onDone=arguments[0]),2===arguments.length&&(subscriptionId=arguments[0],onDone=arguments[1]);var params={offset:allLoadedJobs.length};subscriptionId&&(params.subscriptionId=subscriptionId),Job.query(params).$promise.then(function(jobs){angular.forEach(jobs,function(job){allLoadedJobs.push(job)}),onDone(null,jobs)},function(error){onDone(error)})},Job.getItems=function(){return allLoadedJobs},Job.clearItems=function(){allLoadedJobs=[]},Job}]),angular.module("dashboard").factory("Subscription",["$resource","Notification",function($resource,Notification){var Subscription=$resource("/api/subscriptions/:id",{id:"@_id"},{query:{isArray:!0,transformResponse:function(data){return angular.forEach(angular.fromJson(data),function(item){subscriptionsList.push(new Subscription(item))}),subscriptionsList},interceptor:Notification.interceptor},get:{interceptor:Notification.interceptor},save:{method:"POST",isArray:!1,transformResponse:function(data){var dataObject=angular.fromJson(data),subscriptionObject=new Subscription(dataObject);return subscriptionsList.push(subscriptionObject),angular.fromJson(data)},interceptor:Notification.interceptor},update:{method:"PUT",transformResponse:function(data){for(var dataObject=angular.fromJson(data),subscriptionObject=new Subscription(dataObject),i=0;i<subscriptionsList.length;i++)subscriptionsList[i]._id===dataObject._id&&(subscriptionsList[i]=new Subscription(dataObject));return subscriptionObject},interceptor:Notification.interceptor},remove:{method:"DELETE",interceptor:Notification.interceptor}}),subscriptionsList=[];return Subscription.getAll=function(){return subscriptionsList},Subscription.clear=function(){subscriptionsList=[]},Subscription}]),angular.module("stats").config(["$stateProvider",function($stateProvider){$stateProvider.state("stats",{url:"/statistics",templateUrl:"modules/stats/views/stats.client.view.html"})}]),angular.module("stats").controller("StatsController",["$scope","Job",function($scope,Job){$scope.loadInProgress=!0,Job.getStats({cities:!0,availabilities:!0}).$promise.then(function(stats){$scope.stats=stats,$scope.maxCityCount=0,angular.forEach(stats.cities,function(city){$scope.maxCityCount=city.count>$scope.maxCityCount?city.count:$scope.maxCityCount}),$scope.maxAvailCount=0,angular.forEach(stats.availabilities,function(avail){$scope.maxAvailCount=avail.count>$scope.maxAvailCount?avail.count:$scope.maxAvailCount}),$scope.loadInProgress=!1},function(){$scope.loadInProgress=!1})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication","Notification",function($scope,$http,$location,Authentication,Notification){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/dashboard"),$scope.signup=function(){$http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){Notification.showError(response.message)})},$scope.signin=function(){$http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/dashboard")}).error(function(response){Notification.showError(response.message)})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication","Notification",function($scope,$http,$location,Users,Authentication,Notification){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.updateUserProfile=function(isValid){if(isValid){var user=new Users($scope.user);user.$update(function(response){Notification.showSuccess("Profile Saved Successfully"),Authentication.user=response},function(response){})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Notification.showSuccess("Password Changed Successfully")}).error(function(response){Notification.showError(response.message)})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource","Notification",function($resource,Notification){return $resource("api/users",{},{update:{method:"PUT",interceptor:Notification.interceptor}})}]);